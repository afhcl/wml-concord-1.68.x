concord-server {

    # API port
    port = 8001

    db {
        url = "jdbc:postgresql://localhost:5432/postgres"
        url = ${?DB_URL}

        appUsername = "postgres"
        appUsername = ${?DB_USERNAME}

        # appPassword = "..."
        appPassword= ${?DB_PASSWORD}

        inventoryUsername = "postgres"
        inventoryUsername = ${?DB_INVENTORY_USERNAME}

        # inventoryPassword = "..."
        inventoryPassword = ${?DB_INVENTORY_PASSWORD}

        maxPoolSize = 10
    }

    # "remember me" cookie support
    rememberMe {
        # max age of the "remember me" cookie (sec)
        maxAge = 1209600 # two weeks

        # default value, change for production (base64)
        # should be a valid AES key (16, 24 or 32 bytes)
        # if not set, a new random key will be used
        # cipherKey = "..."
    }

    # email notifications
    email {
        enabled = false

        host = "localhost"
        port = "25"

        connectTimeout = 20000
        readTimeout = 10000

        from = "noreply@example.com"
    }

    process {
        # default process configuration
        defaultConfiguration = null

        # the period between checks for failed or stalled processes (sec)
        # if zero the task is disabled
        watchdogPeriod = 3

        # the state cleanup interval (sec)
        # if zero the task is disabled
        cleanupInterval = 3600

        # enable cleanup of the process queue
        queueCleanup = true

        # enable cleanup of the process state table
        stateCleanup = true

        # enable cleanup of the process events table
        eventsCleanup = true

        # enable cleanup of the process logs
        logsCleanup = true

        # max age of the process state data (ms)
        maxStateAge = 604800000

        # max age of failed processes to handle (PG interval)
        maxFailureHandlingAge = "3 days"

        # max age of stalled processes to handle (PG interval)
        maxStalledAge = "1 minute"

        # max age of processes which are failed to start (PG interval)
        maxStartFailureAge = "10 minutes"

        # list of process state files that must be encrypted before storing
        secureFiles: ["_main.json"]

        signingKeyAlgorithm = "RSA"
        signingAlgorithm = "SHA256withRSA"
        # (optional) a key used to sign important process data (such as initiator or currentUser IDs)
        # signingKeyPath = "..."
    }

    queue {
        # maximum rate at which processes are allowed to start (proc/sec)
        # zero or a negative value disables the rate limiting
        rateLimit = 5

        # maximum time to wait if the process start was rate limited (ms)
        maxRateTimeout = 10000
    }

    audit {
        enabled = true

        # the log cleanup interval (sec)
        # if zero the task is disabled
        cleanupPeriod = 3600

        # max age of the audit log data (ms)
        maxLogAge = 604800000
    }

    repositoryCache {
        # directory to store the local repo cache
        # created automatically if not specified
        # cacheDir = "/tmp/concord/repos"

        # check if concord.yml is present in the repo
        concordFileValidationEnabled = false

        # timeout for checkout operations (ms)
        lockTimeout = 180000
    }

    template {
        # directory to store process template cache
        # created automatically if not specified
        # cacheDir = "/tmp/concord/templates"
    }

    secretStore {
        # the default store definition to use (see below)
        # case insensitive
        default = concord

        # maximum allowed size of binary secrets (bytes)
        maxSecretDataSize = 1048576

        # maximum allowed size of encrypted strings (used in `crypto.decryptString`, bytes)
        maxEncryptedStringLength = 102400

        # default values, change for production (base64)
        # serverPassword = "..."
        # secretStoreSalt = "..."
        # projectSecretSalt = "..."

        concord {
            enabled = true
        }
    }

    triggers {
        # disabling all triggers mean that all events (including repository refresh) will be disabled
        disableAll: false

        # the specified event types will be ignored
        disabled: []
    }

    # API key authentication
    apiKey {
        expirationEnabled = false

        # default expiration period (days)
        expirationPeriod =  30

        # how often Concord will send expiration notifications (days)
        notifyBeforeDays = [1, 3, 7, 15]
    }

    # AD/LDAP authentication
    ldap {
        url = "ldap://oldap:389"
        searchBase = "dc=example,dc=org"
        principalSearchFilter = "(cn={0})"
        userSearchFilter = "(cn=*{0}*)"
        usernameProperty = "cn"

        groupSearchFilter = "(cn=*{0}*)"
        groupNameProperty = "cn"
        groupDisplayNameProperty = "cn"

        mailProperty = "mail"
        returningAttributes = []
        systemUsername = "cn=admin,dc=example,dc=org"
        # systemPassword = "..."
    }

    # AD/LDAP group synchronization
    ldapGroupSync {
        # interval between runs (seconds)
        interval = 86400 # one day

        # the number of users fetched at the time
        fetchLimit = 100

        # minimal age of the record (PostgreSQL interval)
        minAge = "1 day"
    }

    git {
        # oauth = "..."

        # use GIT's shallow clone
        shallowClone = true

        # see GIT documentation for GIT_HTTP_LOW_SPEED_LIMIT and GIT_HTTP_LOW_SPEED_TIME
        # use with caution, can cause performance issues
        httpLowSpeedLimit = 0
        httpLowSpeedTime = 600

        sshTimeoutRetryCount = 1
        sshTimeout = 600
    }

    # GitHub integration
    github {
        githubDomain = "github.com"
        githubDomain = ${?GITHUB_DOMAIN}

        # default value, for testing only
        secret = "12345"

        defaultFilter = {
            unknownRepo = false
        }
    }

    ansibleEvents {
        # how often the ansible event processing should run (sec)
        # if zero the task is disabled
        period = 2

        # how many records to featch at the time
        fetchLimit = 10000
    }

    # external events (/api/v1/event/{eventName} endpoint)
    externalEvents {
        # if set the endpoint will require the specified user role
        # keys are regexes matched with eventNames, values are the required roles
        # requiredRoles = { }
    }

    # process dependency configuration
    dependencies {
        # path to a .properties file with the list of default versions
        # versionsPath = "..."
    }

    # JWT-based SSO service support
    sso {
        enabled = false
        authEndpointUrl = ""
        tokenEndpointUrl = ""
        logoutEndpointUrl = ""
        redirectUrl = ""
        clientId = ""
        clientSecret = ""
        #tokenSigningKey =
        #tokenEncryptionKey =
        tokenServiceReadTimeout = 5000
        tokenServiceConnectTimeout = 500
        validateNonce = false
    }

    development {
    }

    production {
    }
}
