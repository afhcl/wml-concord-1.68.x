<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.walmartlabs.concord.it</groupId>
        <artifactId>parent</artifactId>
        <version>1.21.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>concord-server-it</artifactId>
    <packaging>takari-jar</packaging>

    <properties>
        <ansible.image>walmartlabs/concord-ansible</ansible.image>
        <db.image>library/postgres</db.image>
        <server.image>walmartlabs/concord-server</server.image>
        <agent.image>walmartlabs/concord-agent</agent.image>
        <dind.image>docker:stable-dind</dind.image>
        <socat.image>bobrik/socat</socat.image>
        <base.dir>${basedir}</base.dir>
        <deps.dir>${project.basedir}/target/deps</deps.dir>
        <deps.dir.src.mount>${project.basedir}/target/deps</deps.dir.src.mount>
        <docker.host.addr>localhost</docker.host.addr>
        <docker.daemon.addr>tcp://127.0.0.1:2375</docker.daemon.addr>
        <it.server.port>8001</it.server.port>
        <local.repository.src.mount>${settings.localRepository}</local.repository.src.mount>
        <tmp.dir>${java.io.tmpdir}</tmp.dir>
        <tmp.dir.src.mount>${java.io.tmpdir}</tmp.dir.src.mount>
        <network>net-server-it</network>
        <skip.socat>true</skip.socat>
        <it.docker.port>2375</it.docker.port>
        <it.server.network.mode>custom</it.server.network.mode>
        <it.db.addr>db-node:5432</it.db.addr>
        <it.ldap.addr>ldap-node:389</it.ldap.addr>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.walmartlabs.concord</groupId>
            <artifactId>concord-client</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.walmartlabs.concord.server.plugins.ansible</groupId>
            <artifactId>concord-ansible-plugin-client</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>concord-common-it</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.walmartlabs.concord</groupId>
            <artifactId>concord-sdk</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.walmartlabs.concord</groupId>
            <artifactId>concord-common</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.walmartlabs.concord.plugins.basic</groupId>
            <artifactId>ansible-template</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.sshd</groupId>
            <artifactId>sshd-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.sshd</groupId>
            <artifactId>sshd-git</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.icegreen</groupId>
            <artifactId>greenmail</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.googlecode.junit-toolbox</groupId>
            <artifactId>junit-toolbox</artifactId>
            <version>2.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <filtering>false</filtering>
                <directory>${project.basedir}/src/test/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>io.takari.maven.plugins</groupId>
                <artifactId>takari-lifecycle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <skipTests>${skip.it.tests}</skipTests>
                    <environmentVariables>
                        <CONCORD_TMP_DIR>${tmp.dir}</CONCORD_TMP_DIR>
                        <IT_DEPS_DIR>${deps.dir}</IT_DEPS_DIR>
                        <IT_DOCKER_ANSIBLE_IMAGE>${ansible.image}</IT_DOCKER_ANSIBLE_IMAGE>
                        <IT_DOCKER_HOST_ADDR>${docker.host.addr}</IT_DOCKER_HOST_ADDR>
                        <IT_PROJECT_VERSION>${project.version}</IT_PROJECT_VERSION>
                        <IT_SERVER_PORT>${it.server.port}</IT_SERVER_PORT>
                        <IT_LDAP_URL>ldap://localhost:${it.ldap.port}</IT_LDAP_URL>
                    </environmentVariables>
                    <systemProperties>
                        <java.io.tmpdir>${tmp.dir}</java.io.tmpdir>
                    </systemProperties>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>ansible-tasks</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>ansible-template</artifactId>
                                    <version>${project.version}</version>
                                    <destFileName>ansible-template.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>concord-tasks</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>dynamic-tasks</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>

                                <!-- TODO this should be automated -->
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>smtp-tasks</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.apache.commons</groupId>
                                    <artifactId>commons-email</artifactId>
                                    <version>${commons.email.version}</version>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.sun.mail</groupId>
                                    <artifactId>javax.mail</artifactId>
                                    <version>${javax.mail.version}</version>
                                </artifactItem>

                                <artifactItem>
                                    <groupId>org.codehaus.groovy</groupId>
                                    <artifactId>groovy-all</artifactId>
                                    <version>${groovy.version}</version>
                                </artifactItem>

                                <!-- used by DependenciesIT as an example dependency -->
                                <artifactItem>
                                    <groupId>com.walmartlabs.concord.plugins.basic</groupId>
                                    <artifactId>example-tasks</artifactId>
                                    <version>${project.version}</version>
                                    <destFileName>example.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${deps.dir}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ensure-available</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <!-- to test broken classpaths -->
                            <artifactItems>
                                <artifactItem>
                                    <groupId>io.takari.bpm</groupId>
                                    <artifactId>bpm-engine-api</artifactId>
                                    <version>0.10.0</version>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>io.takari.bpm</groupId>
                                    <artifactId>bpm-engine-api</artifactId>
                                    <version>0.10.0</version>
                                    <type>pom</type>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${tmp.dir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>mac-os</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <tmp.dir>/tmp</tmp.dir>
                <docker.host.addr>host.docker.internal</docker.host.addr>
                <skip.socat>false</skip.socat>
            </properties>
        </profile>
        <profile>
            <id>not-mac-os</id>
            <activation>
                <os>
                    <family>
                        !mac
                    </family>
                </os>
            </activation>
            <properties>
                <it.server.network.mode>host</it.server.network.mode>
                <it.server.port>8001</it.server.port>
                <it.db.addr>localhost:${it.db.port}</it.db.addr>
                <it.ldap.addr>localhost:${it.ldap.port}</it.ldap.addr>
            </properties>
        </profile>
        <profile>
            <id>docker</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <skipRun>${skip.it.tests}</skipRun>
                            <showLogs>false</showLogs>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                            <images>
                                <image>
                                    <name>${socat.image}</name>
                                    <alias>socat</alias>
                                    <run>
                                        <skip>${skip.socat}</skip>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <volumes>
                                            <bind>
                                                <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                                            </bind>
                                        </volumes>
                                        <labels>
                                            <concordTxId>${txId}</concordTxId>
                                        </labels>
                                        <cmd> TCP-LISTEN:${it.docker.port},fork UNIX-CONNECT:/var/run/docker.sock</cmd>
                                    </run>
                                </image>
                                <image>
                                    <name>osixia/openldap</name>
                                    <alias>openldap</alias>
                                    <run>
                                        <ports>
                                            <port>${it.ldap.port}:389</port>
                                        </ports>
                                        <network>
                                            <mode>custom</mode>
                                            <name>${network}</name>
                                            <alias>ldap-node</alias>
                                        </network>
                                        <wait>
                                            <log>(?s).*slapd starting*</log>
                                            <time>60000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>${db.image}</name>
                                    <alias>db</alias>
                                    <run>
                                        <ports>
                                            <port>it.db.port:5432</port>
                                        </ports>
                                        <network>
                                            <mode>custom</mode>
                                            <name>${network}</name>
                                            <alias>db-node</alias>
                                        </network>
                                        <env>
                                            <POSTGRES_PASSWORD>it</POSTGRES_PASSWORD>
                                        </env>
                                        <wait>
                                            <log>(?s).*ready for start up.*ready to accept connections.*</log>
                                            <time>60000</time>
                                        </wait>
                                        <labels>
                                            <concordTxId>${txId}</concordTxId>
                                        </labels>
                                    </run>
                                </image>
                                <image>
                                    <name>${server.image}</name>
                                    <alias>server</alias>
                                    <run>
                                        <ports>
                                            <port>it.server.port:8001</port>
                                        </ports>
                                        <network>
                                            <mode>${it.server.network.mode}</mode>
                                            <name>${network}</name>
                                            <alias>server-node</alias>
                                        </network>
                                        <volumes>
                                            <bind>
                                                <!-- to share files between tests and the server -->
                                                <volume>${tmp.dir.src.mount}:${tmp.dir}</volume>
                                                <!-- allows the server to pick up local dependencies -->
                                                <volume>${deps.dir.src.mount}:${deps.dir}:ro</volume>
                                                <!-- provide the server's cfg -->
                                                <volume>${base.dir}/src/test/resources/server.conf:/opt/concord/conf/server.conf:ro</volume>
                                            </bind>
                                        </volumes>
                                        <env>
                                            <CONCORD_CFG_FILE>/opt/concord/conf/server.conf</CONCORD_CFG_FILE>
                                            <CONCORD_TMP_DIR>${tmp.dir}</CONCORD_TMP_DIR>
                                            <DB_URL>jdbc:postgresql://${it.db.addr}/postgres</DB_URL>
                                            <DB_USERNAME>postgres</DB_USERNAME>
                                            <DB_PASSWORD>it</DB_PASSWORD>
                                            <DB_INVENTORY_USERNAME>postgres</DB_INVENTORY_USERNAME>
                                            <DB_INVENTORY_PASSWORD>it</DB_INVENTORY_PASSWORD>
                                            <LDAP_URL>ldap://${it.ldap.addr}</LDAP_URL>
                                        </env>
                                        <wait>
                                            <!--suppress MavenModelInspection -->
                                            <http>
                                                <url>http://localhost:${it.server.port}/api/v1/server/ping</url>
                                            </http>
                                            <time>60000</time>
                                        </wait>
                                        <labels>
                                            <concordTxId>${txId}</concordTxId>
                                        </labels>
                                    </run>
                                </image>
                                <!-- TODO start DIND? -->
                                <image>
                                    <name>${agent.image}</name>
                                    <alias>agent</alias>
                                    <run>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <volumes>
                                            <bind>
                                                <!-- to share files between process containers -->
                                                <volume>${tmp.dir.src.mount}:${tmp.dir}</volume>
                                                <!-- allows the agent to pick up local dependencies -->
                                                <volume>${deps.dir.src.mount}:${deps.dir}:ro</volume>
                                                <!-- share host artifacts -->
                                                <volume>${local.repository.src.mount}:/host/.m2/repository:ro</volume>
                                                <volume>${base.dir}/src/test/resources/mvn.json:/opt/concord/conf/mvn.json:ro</volume>
                                            </bind>
                                        </volumes>
                                        <env>
                                            <CONCORD_DOCKER_LOCAL_MODE>false</CONCORD_DOCKER_LOCAL_MODE>
                                            <CONCORD_MAVEN_CFG>/opt/concord/conf/mvn.json</CONCORD_MAVEN_CFG>
                                            <CONCORD_TMP_DIR>${tmp.dir}</CONCORD_TMP_DIR>
                                            <DOCKER_HOST>${docker.daemon.addr}</DOCKER_HOST>
                                            <SERVER_API_BASE_URL>http://localhost:${it.server.port}</SERVER_API_BASE_URL>
                                            <SERVER_WEBSOCKET_URL>ws://localhost:${it.server.port}/websocket</SERVER_WEBSOCKET_URL>
                                            <WORKERS_COUNT>3</WORKERS_COUNT>
                                        </env>
                                        <labels>
                                            <concordTxId>${txId}</concordTxId>
                                        </labels>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
